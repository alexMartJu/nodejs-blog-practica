name: nodejs-blog-practica

on:
  push:
    branches:
      - main

jobs:
  linter_job:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Descargar el código del repositorio en la máquina virtual para que los siguientes pasos puedan trabajar con él.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Node.js en la máquina virtual, usando la versión 16. Esto asegura que el entorno esté listo para ejecutar aplicaciones Node.js.
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Paso 3: Instalar las dependencias definidas en el archivo "package.json". Esto asegura que las bibliotecas necesarias para el proyecto estén disponibles.
      - name: Install dependencies
        run: npm install

      # Paso 4: Ejecutar el linter para verificar la sintaxis y el estilo del código.
      - name: Run Linter
        run: npm run lint

  cypress_job:
    needs: linter_job
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Descarga el contenido del repositorio en la máquina virtual
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Instala las dependencias definidas en package.json
      - name: Install dependencies
        run: npm install

      # Paso 3: Construimos la app Next antes de arrancarla
      - name: Build Next app
        run: npm run build

      # Paso 4: Arranca el servidor en segundo plano para que Cypress pueda interactuar con él
      - name: Start Next server
        run: |
          npm run start &
          echo "Server started in background"

      # Paso 5: Espera hasta que localhost:3000 esté listo usando curl
      - name: Wait for server
        run: |
          until curl --silent --head --fail http://localhost:3000; do
            echo "Waiting for server to be available..."
            sleep 5
          done
          echo "Server is ready!"

      # Paso 6: Ejecuta los tests de Cypress y guarda el código de salida en un archivo cypress_exitcode.txt
      - name: Run Cypress
        id: run_cypress
        continue-on-error: true
        run: |
          # Desactiva 'exit on error' en Bash para que si Cypress falla, este script continúe
          set +e
          npx cypress run
          EXIT_CODE=$?
          set -e

          echo "Cypress exit code was: $EXIT_CODE"
          echo "$EXIT_CODE" > cypress_exitcode.txt
          ls -l
          cat cypress_exitcode.txt

      # Paso 7: Evalúa los resultados de Cypress y crea result.txt con "success" o "failure"
      - name: Evaluate Cypress results
        run: |
          exit_code=$(cat cypress_exitcode.txt)

          if [ "$exit_code" -eq 0 ]; then
            echo "success" > result.txt
          else
            echo "failure" > result.txt
          fi

          echo "Contenido de result.txt:"
          cat result.txt

      # Paso 8: Sube el archivo result.txt como artefacto para que pueda ser descargado
      - name: Upload Cypress results
        uses: actions/upload-artifact@v4
        with:
          name: cypress-result
          path: result.txt

  add_badge_job:
    runs-on: ubuntu-latest
    needs: cypress_job

    steps:
      # Paso 1: Descargar el código del repositorio en la máquina virtual para que los siguientes pasos puedan trabajar con él.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Descargar el artefacto creado en el job 'cypress_job'.
      - name: Download cypress artifact
        uses: actions/download-artifact@v4
        with:
          name: cypress-result
          path: . # Se descarga en el directorio raíz

      # Paso 3: Establecer un output con la lectura de 'result.txt' para el resultado de Cypress.
      - name: Set outcome output
        id: set_outcome
        run: echo "::set-output name=cypress_outcome::$(cat result.txt)"

      # Paso 4: Llamar a la acción personalizada que actualiza el README con un badge.
      - name: Update README with badge
        uses: ./ #action.yaml
        with:
          # outcome es el valor que contiene "success" o "failure"
          outcome: ${{ steps.set_outcome.outputs.cypress_outcome }}

      # Paso 5: Realizar un commit y push de los cambios al README.
      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Actualizando README con badge de Cypress"
          git push

  deploy_job:
    runs-on: ubuntu-latest
    needs: cypress_job
    
    steps:
      # Paso 1: Descargar el código del repositorio en la máquina virtual para que los siguientes pasos puedan trabajar con él.
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Paso 2: Desplegar la aplicación en Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: "--prod"

  notification_job:
    runs-on: ubuntu-latest
    needs: [linter_job, cypress_job, add_badge_job, deploy_job]
    if: always()

    steps:
      # Paso 1: Necesita acceso a archivos del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3
        # Este paso descarga el código fuente del repositorio para que el workflow pueda acceder a los archivos y realizar los siguientes pasos.

      # Paso 2: Acción personalizada que envía el correo
      - name: Send notification email
        uses: ./github_actions/send-mail
        # Esta es una acción personalizada para enviar un correo de notificación.

        env:
          # Configuración de las credenciales de Gmail desde los secretos de GitHub
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        
        with:
          # Dirección de correo electrónico a la que se enviará la notificación
          to: ${{ secrets.PERSONAL_EMAIL }}
          # Asunto del correo electrónico
          subject: "Resultat del workflow executat"
          # Cuerpo del correo electrónico, con los resultados de los jobs anteriores
          body: |
            S'ha realitzat un push en la branca main que ha provocat l'execució del workflow nom_repositori_workflow amb els següents resultats:

            - linter_job: ${{ needs.linter_job.result }}
            - cypress_job: ${{ needs.cypress_job.result }}
            - add_badge_job: ${{ needs.add_badge_job.result }}
            - deploy_job: ${{ needs.deploy_job.result }}